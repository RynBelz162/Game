@using Game.Shared.Models
@using Game.Shared.Services

@inject TeamService teamService

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

<div class="bg-slate-700 rounded shadow-md p-6 mt-4">
    @if (Team is null || IsBusy)
    {
        <h1>Loading...</h1>
    }
    else
    {
        <img class="w-96 h-96 blur-md" src="@Team.Information.Logo" />

        <EditForm OnSubmit="Submit" Model="Model" FormName="TeamGuessForm">
            <div class="mx-auto">
                <div>
                    <label for="guess" class="block mb-2 text-sm font-medium text-white">Your Guess</label>
                    <InputText @bind-Value="Model!.Guess" id="guess" class="border text-white text-sm rounded-lg block w-full p-2.5 bg-gray-700 border-gray-600 placeholder-gray-400 focus:ring-green-500 focus:border-green-500" required />
                </div>
                
                <button type="submit" disabled="@IsBusy" class="mt-4 w-full bg-green-800 hover:bg-green-700 disabled:bg-slate-600 disabled:hover:bg-slate-600 p-2 rounded-lg">
                    Submit
                </button>
            </div>
        </EditForm>

        <button @onclick="Skip" disabled="@IsBusy" class="mt-4 w-full bg-gray-800 hover:bg-gray-700 disabled:bg-gray-600 disabled:hover:bg-gray-600 p-2 rounded-lg">
            Skip
        </button>
    }
</div>

@code {
    [SupplyParameterFromForm]
    public GuessModel? Model { get; set; }

    public Team? Team { get; set; }
    public bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        Team ??= await teamService.GetRandomTeam();
    }

    async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(Model?.Guess) || Team is null)
        {
            return;
        }

        var ratio = FuzzySharp.Fuzz.Ratio(Model.Guess.ToLower(), Team.Information.Name.ToLower());
        if (ratio < 80)
        {
            return;
        }

        IsBusy = true;

        try
        {
            Team = await teamService.GetRandomTeam();
            Model.Guess = null;
        }
        finally
        {
            IsBusy = false;
        }
    }

    async Task Skip()
    {
        IsBusy = true;

        try
        {
            Team = await teamService.GetRandomTeam();
        }
        finally
        {
            IsBusy = false;
        }
    }

    public class GuessModel
    {
        public string? Guess { get; set; }
    }
}